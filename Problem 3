1-	Find the names of all students who are friends with someone named Gabriel. 
    
    SELECT Highschooler.name
    FROM Highschooler
    INNER JOIN Friend ON Highschooler.ID = Friend.ID1
    INNER JOIN Highschooler HS2 ON HS2.ID = Friend.ID2
    WHERE HS2.name = 'Gabriel';
    
    | name      |
    | :-------: |
    | Jordan    |
    | Cassandra |
    | Andrew    |
    | Alexis    |
    | Jessica   |
    
2-	For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. 
    
    SELECT HS.name, HS.grade, HS2.name, HS2.grade
    FROM Highschooler HS
    INNER JOIN LIKES ON HS.ID = Likes.ID1
    INNER JOIN Highschooler HS2 ON HS2.ID = Likes.ID2
    WHERE (HS2.grade - HS2.grade) >= 2;
    
    | name   | grade | name   | grade |
    | :----: | :---: | :----: | :---: |
    | Jordan | 12    | Halsey | 10    |
    
3-	For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. 
    
    SELECT HS1.name, HS1.grade, HS2.name, HS2.grade
    FROM Highschooler HS1, Highschooler HS2, Likes Likes1, Likes Likes2
    WHERE (HS1.ID = Likes.ID1 AND HS2.ID1 = Likes1.ID2) AND (HS2.ID = Likes2.ID1 AND HS1.ID = Likes2.ID2) AND HS1.name < HS2.name
    ORDER BY HS1.name, HS2.name;
    
    | name      | grade | name    | grade |
    | :-------: | :---: | :-----: | :---: |
    | Jordan    | 9     | Gabriel | 9     |
    | Caddandra | 11    | Kyle    | 12    |
    
4-	Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. 
    
    SELECT name, grade
    FROM Highschooler
    WHERE ID NOT IN
    (
      SELECT DISTINCT ID1
      FROM Likes
      UNION
      SELECT DISTINCT ID2
      FROM Likes
    )
    ORDER BY grade, name;
    
    | name    | grade |
    | :-----: | :---: |
    | Jordan  | 9     |
    | Tiffany | 9     |
    | Logan   | 12    |
    
5-	For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 
    
    SELECT HS1.name, HS2.grade, HS2.name, HS2.grade
    FROM Highschooler HS1
    INNER JOIN Likes ON HS1.ID = Likes.ID1
    INNER Join Highschooler HS2 ON HS2.ID = Likes.ID2
    WHERE
    (
      HS1.ID = Likes.ID1 AND HS2.ID = Likes.ID2
    )
    AND HS2.ID NOT IN
    (
      SELECT DISTINCT ID1
      FROM Likes
    );
    
    | name     | grade | name   | grade |
    | :------: | :---: | :----: | :---: |
    | John     | 12    | Haley  | 10    |
    | Alexis   | 11    | Kris   | 10    |
    | Brittany | 10    | Kris   | 10    |
    | Austin   | 11    | Jordan | 12    |
    
6-	Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. 
    
    SELECT name, grade
    FROM Highschooler HS1
    WHERE ID NOT IN
    (
      SELECT ID1
      FROM Friend, Highschooler HS2
      WHERE HS1.ID = Friend.ID1 AND HS2.ID = Friend.ID2 AND HS2.grade <> HS2.grade
    )
    ORDER BY grade, name;
     
    | name     | grade |
    | :------: | :---: |
    | Jordan   | 9     |
    | Brittany | 10    |
    | Haley    | 10    |
    | Kris     | 10    |
    | Gabriel  | 11    |
    | John     | 12    |
    | Logan    | 12    |
     
7-	For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 
    
    SELECT DISTINCT HS1.name, HS1.grade, HS2.name, HS2.grade, HS3.name, HS3.grade
    FROM Highschooler HS1, Highschooler HS2, Highschooler HS3, Likes, Friend Friend1, Friend Friend2
    WHERE (HS1.ID = Likes.ID1 AND HS2.ID = Likes.ID2) AND HS2.ID NOT IN
    (
      SELECT ID2
      FROM Friend
      WHERE IS1 = HS1.ID
    )
    AND (HS1.ID = Friend1.ID1 AND HS3.ID = Friend1.ID2) AND (HS2.ID = Friend2.ID1 AND HS3.ID = Friend2.ID2);
    
    | name   | grade | name      | grade | name    | grade |
    | :----: | :---: | :-------: | :---: | :-----: | :---: |
    | Andrew | 10    | Cassandra | 9     | Grabiel | 9     |
    | Austin | 11    | Jordan    | 10    | Andrew  | 10    |
    | Austin | 11    | Jordan    | 12    | Kyle    | 12    |
    
8-	Find the difference between the number of students in the school and the number of different first names. 
    
    SELECT COUNT(*) - COUNT(DISTINCT name)
    FROM Highschooler;
    
    | COUNT(*) - COUNT(DISTINCT name)      |
    | :----------------------------------: |
    | 2                                    |
    
9-	Find the name and grade of all students who are liked by more than one other student. 
    
    SELECT name, grade)
    FROM Highschooler
    INNER JOIN Likes ON Highschooler.ID = Likes.ID2
    GROUP BY ID2
    HAVING COUNT(*) > 1;
    
    | name      | grade |
    | :-------: | :---: |
    | Cassandra | 9     |
    | Kris      | 10    |
 
